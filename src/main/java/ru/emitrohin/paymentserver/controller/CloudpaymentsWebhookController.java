package ru.emitrohin.paymentserver.controller;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.emitrohin.paymentserver.client.BotMotherClient;
import ru.emitrohin.paymentserver.client.TelegramBotClient;
import ru.emitrohin.paymentserver.dto.cloudpayments.CloudpaymentsRequest;
import ru.emitrohin.paymentserver.dto.mapper.TransactionMapper;
import ru.emitrohin.paymentserver.model.Card;
import ru.emitrohin.paymentserver.model.SubscriptionStatus;
import ru.emitrohin.paymentserver.service.CardService;
import ru.emitrohin.paymentserver.service.SubscriptionService;
import ru.emitrohin.paymentserver.service.TransactionService;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequiredArgsConstructor
//TODO change to api
//TODO client retries and error handling
public class CloudpaymentsWebhookController {

    private final Logger logger = LoggerFactory.getLogger(CloudpaymentsWebhookController.class);

    private final TelegramBotClient telegramBotClient;

    private final BotMotherClient botMotherClient;

    private final TransactionService transactionService;

    private final SubscriptionService subscriptionService;

    private final TransactionMapper mapper;

    private final CardService cardService;

    //TODO check webhook –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ accountId
    @PostMapping("/cloudpayments/success")
    public ResponseEntity<Map<String, Integer>> successWebhook(@Valid CloudpaymentsRequest request) {
        try {
            var telegramId = Long.parseLong(request.getAccountId());
            var entity = mapper.createFromRequest(request);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactionService.save(entity);

            var existingCard = cardService.getCardByCardId(request.getCardId());
            if (existingCard == null) {
                cardService.deactivatePrimaryForAllCards(telegramId);
                var card = new Card();
                card.setTelegramId(telegramId);
                card.setCardId(request.getCardId());  // –ü–æ–ª—É—á–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cardId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                card.setCardType(request.getCardType());
                card.setToken(request.getToken());  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ —Ç–æ–∫–µ–Ω—É
                card.setCardLastFour(request.getCardLastFour());
                card.setCardExpDate(request.getCardExpDate());
                card.setIsPrimary(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç—É
                card.setIsActive(true);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É
                cardService.saveCard(card);
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscriptionService.createOrUpdateCurrentSubscriptionStatus(telegramId, SubscriptionStatus.PAID);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
            telegramBotClient.sendMessageWithButtons("–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! üéâ\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ \uD83D\uDC47", telegramId);
            botMotherClient.sendPayload(telegramId);
        } catch (NumberFormatException e) {
            logger.error("AccountId {} should be numeric. Can't save to DB", request.getAccountId());
        }

        var response = new HashMap<String, Integer>();
        response.put("code", 0);
        return ResponseEntity.ok(response);
    }


    @PostMapping( "/cloudpayments/fail")
    public ResponseEntity<Map<String, Integer>> failWebhook(@Valid CloudpaymentsRequest request) {
        var entity = mapper.createFromRequest(request);
        transactionService.save(entity);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º cardId
        var card = cardService.getCardByCardId(request.getCardId());

        if (card != null) {
            // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cardService.deactivateCard(card.getCardId());
        }

        //TODO –≤—ã—Å–ª–∞—Ç—å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π

        var response = new HashMap<String, Integer>();
        response.put("code", 0);
        return ResponseEntity.ok(response);
    }
}
